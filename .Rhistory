est = data.frame(),
edad = data.frame(),
medio = data.frame())
categoricas = c("sexo", "est", "edad", "medio")
data_kruskal = data[c("id", "medio_211", "medio_212",
"medio_221","medio_231",
"medio_241","medio_251",
"medio_261", "medio_271"
,"medio_272","medio_273"
,"medio_274",
"sexo", "edad", "est", "medio")]
colnames(data_kruskal) = c("id", "costo_ad", "costo_op",
"accidente", "delincuencia",
"confort", "tiempo", "emisiones", "perc_fam",
"perc_am", "importa_fam", "importa_am",
"sexo", "edad", "est", "medio")
hipotesis =  c("costo_ad", "costo_op", "accidente",
"delincuencia","confort", "tiempo",
"emisiones", "perc_fam","perc_am",
"importa_fam", "importa_am")
for (i in categoricas) {
item_cat = which(names(lista_kruskal) ==i)
lista_kruskal[[item_cat]] = data.frame(Variables = hipotesis,
Chi_2 = rep(NA, length(hipotesis)),
p = rep(NA, length(hipotesis)))
for (j in hipotesis) {
item_hyp = which(lista_kruskal[[item_cat]]$Variables == j )
kruskal_aux = data_kruskal[c(j,i)]
colnames(kruskal_aux) = c("continua", "discreta")
kruskal_test_aux = kruskal.test(kruskal_aux$continua~kruskal_aux$discreta)
lista_kruskal[[item_cat]]$Chi_2[item_hyp] = paste0(round(kruskal_test_aux$statistic, digits = 1),
" (",
kruskal_test_aux$parameter
, ")")
lista_kruskal[[item_cat]]$p[item_hyp]  = round(kruskal_test_aux$p.value, digits = 2)
colnames(lista_kruskal[[item_cat]]) = c("Variables",
paste0(i,"_Chi_2"),
paste0(i,"_p"))
}
}
colnames(lista_kruskal[[item_cat]])
lista_kruskal = list(sexo = data.frame(),
est = data.frame(),
edad = data.frame(),
medio = data.frame())
categoricas = c("sexo", "est", "edad", "medio")
data_kruskal = data[c("id", "medio_211", "medio_212",
"medio_221","medio_231",
"medio_241","medio_251",
"medio_261", "medio_271"
,"medio_272","medio_273"
,"medio_274",
"sexo", "edad", "est", "medio")]
colnames(data_kruskal) = c("id", "costo_ad", "costo_op",
"accidente", "delincuencia",
"confort", "tiempo", "emisiones", "perc_fam",
"perc_am", "importa_fam", "importa_am",
"sexo", "edad", "est", "medio")
hipotesis =  c("costo_ad", "costo_op", "accidente",
"delincuencia","confort", "tiempo",
"emisiones", "perc_fam","perc_am",
"importa_fam", "importa_am")
for (i in categoricas) {
item_cat = which(names(lista_kruskal) ==i)
lista_kruskal[[item_cat]] = data.frame(Variables = hipotesis,
Chi_2 = rep(NA, length(hipotesis)),
p = rep(NA, length(hipotesis)))
for (j in hipotesis) {
item_hyp = which(lista_kruskal[[item_cat]]$Variables == j )
kruskal_aux = data_kruskal[c(j,i)]
colnames(kruskal_aux) = c("continua", "discreta")
kruskal_test_aux = kruskal.test(kruskal_aux$continua~kruskal_aux$discreta)
lista_kruskal[[item_cat]]$Chi_2[item_hyp] = paste0(round(kruskal_test_aux$statistic, digits = 1),
" (",
kruskal_test_aux$parameter
, ")")
lista_kruskal[[item_cat]]$p[item_hyp]  = round(kruskal_test_aux$p.value, digits = 2)
}
colnames(lista_kruskal[[item_cat]]) = c("Variables",
paste0(i,"_Chi_2"),
paste0(i,"_p"))
}
lista_kruskal
lista_kruskal[[1]]
# Resultados generales
kruskal = merge(lista_kruskal[[1]], lista_kruskal[[2]], by = "Variables")
kruskal = merge(kruskal, lista_kruskal[[3]], by = "Variables")
kruskal
kable(kruskal, caption = "Test de Kruskal-Wallis")
kruskal_ltx = kable(kruskal, caption = "Test de Kruskal-Wallis", format = "latex")
setwd("/Users/sergiobarona03/Desktop/Proyecto_movilidad/Informacion secundaria/Análisis descriptivo/")
writeLines(kruskal_ltx,"Latex/kruskal.tex")
chi_2 = data.frame(V1 = c("sexo", "sexo", "sexo", "est", "est", "edad"),
V2 = c("est", "edad", "medio", "edad", "medio", "medio"),
st = rep(NA, 6),
df = rep(NA, 6),
p = rep(NA, 6))
k = 1
var_1 = chi_2$V1[k]
var_2 = chi_2$V2[k]
var_1
var_2
chi_2_aux = data[c(var_1, var_2)]
chi_2_aux
colnames(chi_2_aux) = c("var_1", "var_2")
chi_2_aux
chi_2_test_aux = chisq.test(chi_2_aux$var_1, chi_2_aux$var_2)
chi_2_aux$var_2 = as.factor(chi_2_aux$var_2)
chi_2_test_aux = chisq.test(chi_2_aux$var_1, chi_2_aux$var_2)
chi_2_test_aux
chi_2_aux = data[c(var_1, var_2)]
colnames(chi_2_aux) = c("var_1", "var_2")
chi_2_aux$var_1 = as.factor(chi_2_aux$var_1)
chi_2_aux$var_2 = as.factor(chi_2_aux$var_2)
View(chi_2_aux)
chi_2_aux = data[c("id", var_1, var_2)]
colnames(chi_2_aux) = c("id", "var_1", "var_2")
chi_2_aux$var_1 = as.factor(chi_2_aux$var_1)
chi_2_aux$var_2 = as.factor(chi_2_aux$var_2)
chi_2_test_aux = chisq.test(chi_2_aux$var_1, chi_2_aux$var_2)
chi_2_aux
n_row = which(chi_2$V1 == var_1 & chi_2$V2 == var_2)
n_row
k = 2
var_1 = chi_2$V1[k]
var_2 = chi_2$V2[k]
n_row = which(chi_2$V1 == var_1 & chi_2$V2 == var_2)
n_ro
n_row
################################################################
## Prueba exacta de Fisher (ajuste para muestras pequeñas)    ##
################################################################
fisher = data.frame(V1 = c("sexo", "sexo", "sexo", "est", "est", "edad"),
V2 = c("est", "edad", "medio", "edad", "medio", "medio"),
odds_ratio = rep(NA, 6),
ci = rep(NA, 6),
p = rep(NA, 6))
k = 1
var_1 = fisher$V1[k]
var_2 = fisher$V2[k]
fisher_aux = data[c("id", var_1, var_2)]
colnames(fisher_aux) = c("id", "var_1", "var_2")
fisher_aux$var_1 = as.factor(fisher_aux$var_1)
fisher_aux$var_2 = as.factor(fisher_aux$var_2)
fisher_test_aux = chisq.test(fisher_aux$var_1, fisher_aux$var_2)
fisher_test_aux = fisher.test(fisher_aux$var_1, fisher_aux$var_2)
n_row = which(fisher$V1 == var_1 & fisher$V2 == var_2)
fisher$odds_ratio[n_row] = fisher_test_aux$estimate
fisher_test_aux
fisher$p[n_row] = fisher_test_aux$p.value
################################################################
## Prueba exacta de Fisher (ajuste para muestras pequeñas)    ##
################################################################
fisher = data.frame(V1 = c("sexo", "sexo", "sexo", "est", "est", "edad"),
V2 = c("est", "edad", "medio", "edad", "medio", "medio"),
p = rep(NA, 6))
# Caso generalizado
for (k in 1:nrow(fisher)) {
var_1 = fisher$V1[k]
var_2 = fisher$V2[k]
fisher_aux = data[c("id", var_1, var_2)]
colnames(fisher_aux) = c("id", "var_1", "var_2")
fisher_aux$var_1 = as.factor(fisher_aux$var_1)
fisher_aux$var_2 = as.factor(fisher_aux$var_2)
fisher_test_aux = fisher.test(fisher_aux$var_1, fisher_aux$var_2)
n_row = which(fisher$V1 == var_1 & fisher$V2 == var_2)
fisher$p[n_row] = fisher_test_aux$p.value
}
################################################################
## Prueba Chi-2 test (como el conteo esperado es pequeño, la  ##
## prueba Chi-2 puede no ser apropiada)                       ##
################################################################
chi_2 = data.frame(V1 = c("sexo", "sexo", "sexo", "est", "est", "edad"),
V2 = c("est", "edad", "medio", "edad", "medio", "medio"),
st = rep(NA, 6),
df = rep(NA, 6),
p = rep(NA, 6))
# Caso generalizado
for (k in 1:nrow(chi_2)) {
var_1 = chi_2$V1[k]
var_2 = chi_2$V2[k]
chi_2_aux = data[c("id", var_1, var_2)]
colnames(chi_2_aux) = c("id", "var_1", "var_2")
chi_2_aux$var_1 = as.factor(chi_2_aux$var_1)
chi_2_aux$var_2 = as.factor(chi_2_aux$var_2)
chi_2_test_aux = chisq.test(chi_2_aux$var_1, chi_2_aux$var_2)
n_row = which(chi_2$V1 == var_1 & chi_2$V2 == var_2)
chi_2$st[n_row] = chi_2_test_aux$statistic
chi_2$df[n_row] = chi_2_test_aux$parameter
chi_2$p[n_row] = chi_2_test_aux$p.value
}
chi_2
################################################################
## Prueba exacta de Fisher (ajuste para muestras pequeñas)    ##
################################################################
fisher = data.frame(V1 = c("sexo", "sexo", "sexo", "est", "est", "edad"),
V2 = c("est", "edad", "medio", "edad", "medio", "medio"),
p = rep(NA, 6))
# Caso generalizado
for (k in 1:nrow(fisher)) {
var_1 = fisher$V1[k]
var_2 = fisher$V2[k]
fisher_aux = data[c("id", var_1, var_2)]
colnames(fisher_aux) = c("id", "var_1", "var_2")
fisher_aux$var_1 = as.factor(fisher_aux$var_1)
fisher_aux$var_2 = as.factor(fisher_aux$var_2)
fisher_test_aux = fisher.test(fisher_aux$var_1, fisher_aux$var_2)
n_row = which(fisher$V1 == var_1 & fisher$V2 == var_2)
fisher$p[n_row] = fisher_test_aux$p.value
}
fisher
k = 2
var_1 = fisher$V1[k]
var_2 = fisher$V2[k]
fisher_aux = data[c("id", var_1, var_2)]
colnames(fisher_aux) = c("id", "var_1", "var_2")
fisher_aux$var_1 = as.factor(fisher_aux$var_1)
fisher_aux$var_2 = as.factor(fisher_aux$var_2)
fisher_test_aux = fisher.test(fisher_aux$var_1, fisher_aux$var_2)
workspace = 2e8
# Caso generalizado
for (k in 1:nrow(fisher)) {
k = 2
var_1 = fisher$V1[k]
var_2 = fisher$V2[k]
fisher_aux = data[c("id", var_1, var_2)]
colnames(fisher_aux) = c("id", "var_1", "var_2")
fisher_aux$var_1 = as.factor(fisher_aux$var_1)
fisher_aux$var_2 = as.factor(fisher_aux$var_2)
fisher_test_aux = fisher.test(fisher_aux$var_1, fisher_aux$var_2)
n_row = which(fisher$V1 == var_1 & fisher$V2 == var_2)
fisher$p[n_row] = fisher_test_aux$p.value
}
# Caso generalizado
for (k in 1:nrow(fisher)) {
k = 2
var_1 = fisher$V1[k]
var_2 = fisher$V2[k]
fisher_aux = data[c("id", var_1, var_2)]
colnames(fisher_aux) = c("id", "var_1", "var_2")
fisher_aux$var_1 = as.factor(fisher_aux$var_1)
fisher_aux$var_2 = as.factor(fisher_aux$var_2)
fisher_test_aux = fisher.test(fisher_aux$var_1, fisher_aux$var_2,
simulate.p.value = TRUE)
n_row = which(fisher$V1 == var_1 & fisher$V2 == var_2)
fisher$p[n_row] = fisher_test_aux$p.value
}
fisher
# Caso generalizado
for (k in 1:nrow(fisher)) {
var_1 = fisher$V1[k]
var_2 = fisher$V2[k]
fisher_aux = data[c("id", var_1, var_2)]
colnames(fisher_aux) = c("id", "var_1", "var_2")
fisher_aux$var_1 = as.factor(fisher_aux$var_1)
fisher_aux$var_2 = as.factor(fisher_aux$var_2)
fisher_test_aux = fisher.test(fisher_aux$var_1, fisher_aux$var_2,
simulate.p.value = TRUE)
n_row = which(fisher$V1 == var_1 & fisher$V2 == var_2)
fisher$p[n_row] = fisher_test_aux$p.value
}
fisher
# Caso generalizado
for (k in 1:nrow(fisher)) {
var_1 = fisher$V1[k]
var_2 = fisher$V2[k]
fisher_aux = data[c("id", var_1, var_2)]
colnames(fisher_aux) = c("id", "var_1", "var_2")
fisher_aux$var_1 = as.factor(fisher_aux$var_1)
fisher_aux$var_2 = as.factor(fisher_aux$var_2)
fisher_test_aux = fisher.test(fisher_aux$var_1, fisher_aux$var_2,
simulate.p.value = TRUE, B = 1e7)
n_row = which(fisher$V1 == var_1 & fisher$V2 == var_2)
fisher$p[n_row] = fisher_test_aux$p.value
}
fisher
chi_2
chi_2_ltx = kable(chi_2, caption =  "Prueba Chi-2 de independencia", format = "latex")
setwd("/Users/sergiobarona03/Desktop/Proyecto_movilidad/Informacion secundaria/Análisis descriptivo/")
writeLines(chi_2_ltx,"Latex/chi_2.tex")
fisher_ltx = kable(fisher, caption =  "Prueba exacta de Fisher", format = "latex")
setwd("/Users/sergiobarona03/Desktop/Proyecto_movilidad/Informacion secundaria/Análisis descriptivo/")
writeLines(fisher_ltx,"Latex/fisher.tex")
normalidad_ltx = kable(normalidad, caption = "Tabla 4: prueba de normalidad de Shapiro-Wilk", format = "latex")
setwd("/Users/sergiobarona03/Desktop/Proyecto_movilidad/Informacion secundaria/Análisis descriptivo/")
writeLines(normalidad_ltx,"Latex/normalidad.tex")
alto = %>% filter(alto !%in% c(1,2,3,4))
alto = %>% filter(id !%in% c(1,2,4))
library(dplyr)
alto = %>% filter(id !%in% c(1,2,4))
alto = alto %>% filter(id !%in% c(1,2,4))
alto = alto %>% filter(!id %in% c(1,2,4))
# Simulación de Monte-Carlo
d = c(10,20,50,100,200,300,400,500,1000,2000, 5000, 10000, 100000)
df = data.frame(d, I_D = NA, Dev = NA)
# Simulación de Monte-Carlo
d = c(10,20,50,100,200,300,400,500,1000,2000, 5000, 10000, 100000)
df = data.frame(d, I_D = NA, Dev = NA)
for (k in 1:length(d)) {
d_k = d[k]
x_d = runif(d_k,1,2)
df$I_D[k] = (2-1)*(1/d_k)*(sum(exp(x_d)))
df$Dev[k] = abs(df$I_D[k] - (exp(2)-exp(1)))
}
# Simulación de Monte-Carlo
d = c(10,20,50,100,200,300,400,500,1000,2000, 5000, 10000, 100000, 1000000)
df = data.frame(d, I_D = NA, Dev = NA)
for (k in 1:length(d)) {
d_k = d[k]
x_d = runif(d_k,1,2)
df$I_D[k] = (2-1)*(1/d_k)*(sum(exp(x_d)))
df$Dev[k] = abs(df$I_D[k] - (exp(2)-exp(1)))
}
# plot
plot(x=df$d, y = df$Dev)
# Simulación de Monte-Carlo
d = seq(1,100000, by = 10)
df = data.frame(d, I_D = NA, Dev = NA)
for (k in 1:length(d)) {
d_k = d[k]
x_d = runif(d_k,1,2)
df$I_D[k] = (2-1)*(1/d_k)*(sum(exp(x_d)))
df$Dev[k] = abs(df$I_D[k] - (exp(2)-exp(1)))
}
# Simulación de Monte-Carlo
d = seq(1,10000, by = 10)
df = data.frame(d, I_D = NA, Dev = NA)
for (k in 1:length(d)) {
d_k = d[k]
x_d = runif(d_k,1,2)
df$I_D[k] = (2-1)*(1/d_k)*(sum(exp(x_d)))
df$Dev[k] = abs(df$I_D[k] - (exp(2)-exp(1)))
}
# plot
plot(x=df$d, y = df$Dev) + lines()
# plot
plot(x=df$d, y = df$Dev) + line()
# plot
plot(x=df$d, y = df$Dev)
line()
# plot
plot(x=df$d, y = df$Dev)
# plot
ggplot(x=df$d, y = df$Dev)
# plot
plot(x=df$d, y = df$Dev)
# plot
ggplot(aes(x=d,y=Dev), data = df)
library(ggplot2)
# plot
ggplot(aes(x=d,y=Dev), data = df)
# plot
ggplot(aes(x=d,y=Dev), data = df) + geom_line()
# plot
ggplot(aes(x=d,y=Dev), data = df) + geom_line() +
ylim(0, 0.3)
# plot
ggplot(aes(x=d,y=Dev), data = df) + geom_line() +
ylim(0, 0.2)
# plot
ggplot(aes(x=d,y=Dev), data = df) + geom_line() +
ylim(0, 0.2) + xlim(7500, 10000)
# plot
ggplot(aes(x=d,y=Dev), data = df) + geom_line() +
ylim(0, 0.2)
# Cargar datos
dataset <- read.dta("https://stats.idre.ucla.edu/stat/data/hsbdemo.dta")
library(foreign) # Leer .dta
# Cargar datos
dataset <- read.dta("https://stats.idre.ucla.edu/stat/data/hsbdemo.dta")
############################
##   Prueba 2.1: Modelo   ##
##   probit multinomial   ##
############################
library(foreign) # Leer .dta
library(nnet)    # Estimar logit multinomial
library(ggplot2)
library(reshape2)
library(stargazer) # presentación de resultados
# Cargar datos
dataset <- read.dta("https://stats.idre.ucla.edu/stat/data/hsbdemo.dta")
library(mlogit)
install.packages(mlogit)
install.packages("mlogit")
library(mlogit)
# Estimar modelo probit multinomial
data = mlogit.data(dataset, shape = "wide", choice = "y")
# Estimar modelo probit multinomial
data = mlogit.data(dataset, shape = "wide", choice = "ses")
data
# Estimar modelo probit multinomial
dataset$prog2 <- relevel(dataset$prog, ref = "academic")
data = mlogit.data(dataset, shape = "wide", choice = "prog2")
View(data)
dataset_2 = dataset[c("prog", "ses","write")]
data = mlogit.data(dataset_2, shape = "wide", choice = "prog2")
dataset_2 = dataset[c("prog2", "ses","write")]
data = mlogit.data(dataset_2, shape = "wide", choice = "prog2")
View(data)
View(data)
dataset_2 = dataset[c("prog2", "ses","write")]
data = mlogit.data(dataset_2, shape = "wide", choice = "prog2")
data
View(dataset_2)
data = mlogit.data(dataset_2, shape = "long", choice = "prog2")
data = mlogit.data(dataset_2, shape = "wide", choice = "prog2")
dataset_2$prog2 = as.factor(dataset_2$prog2)
data = mlogit.data(dataset_2, shape = "wide", choice = "prog2")
data
myprobit = mlogit(prog2 ~ ses + write, data, probit = TRUE)
myprobit = mlogit(prog2 ~0|ses + write, data, probit = TRUE)
myprobit = mlogit(prog2 ~0|write, data, probit = TRUE)
myprobit
probit_test = mlogit(prog2 ~ write, data, probit = TRUE)
probit_test = mlogit(prog2 ~0|write, data, probit = TRUE)
logit_test = mlogit(prog2 ~ write, data, probit = FALSE)
logit_test = mlogit(prog2 ~ write, data, probit = FALSE)
logit_test = mlogit(prog2 ~ write, data)
logit_test = multinom(prog2 ~0|write, data)
logit_test
summary(logit_test)
summary(probit_test)
logit_test = multinom(prog2 ~|write, data)
logit_test = multinom(prog2 ~write, data)
summary(logit_test)
probit_test = mlogit(prog2 ~write, data, probit = TRUE)
probit_test = mlogit(prog2 ~0|write, data, probit = TRUE)
probit_test
logit_test = multinom(prog ~ write, dataset)
summary(logit_test)
logit_test = multinom(prog2 ~ write, dataset)
summary(logit_test)
probit_test
probit_test = mlogit(prog2 ~0|write, dataset, probit = TRUE)
probit_test = mlogit(prog2 ~0|write, data, probit = TRUE)
# Cargar datos
dataset <- read.dta("https://stats.idre.ucla.edu/stat/data/hsbdemo.dta")
############################
##   Prueba 2.1: Modelo   ##
##   probit multinomial   ##
############################
library(readxl)
library(foreign) # Leer .dta
setwd("~/Desktop/Proyecto_Long_COVID")
source(here::here("Paper_resultados/Parametric_model/Survival_rate/",
"A2_Selecting.R"))
# construcción de grupos etarios
dataset_parametric = dataset %>% filter(age > 18)
dataset_parametric = dataset_parametric %>% mutate(Group = cut(age,
breaks = c(18, 65, Inf),
include.lowest = TRUE,
right = FALSE))
dataset_parametric$Group = as.character(dataset_parametric$Group)
dataset_parametric$Group_age = NA
for (i in 1:nrow(dataset_parametric)) {
if (dataset_parametric$Group[i] == "[18,65)") {
dataset_parametric$Group_age[i] = 1
}
if (dataset_parametric$Group[i] == "[65,Inf]") {
dataset_parametric$Group_age[i] = 2
}
}
dataset_parametric <- dataset_parametric %>% mutate(Group_age = factor(Group_age,
levels = c(1, 2),
labels = c("[18,65)", "[65,Inf]")))
dataset_parametric <- dataset_parametric %>% mutate(sex = factor(sex,
levels = c("0", "1"),
labels = c("Male", "Female")))
parametric_model_sex = dataset_parametric %>% group_by(sex) %>% do(flex = flexsurvreg(Surv(t_UCI, d) ~ 1, data = ., dist = "gompertz"))
df_km_sex <-  survfit(Surv(t_UCI, d) ~ sex, data = dataset_parametric)
# Male
parametric_model_male = parametric_model_sex[[2]][[1]] %>% summary(type = "survival") %>% data.frame
writexl::write_xlsx(parametric_model_male,
"Paper_resultados/Parametric_model/Survival_rate/Output/Total/Sex/Outcome_male.xlsx")
# Female
parametric_model_female = parametric_model_sex[[2]][[2]] %>% summary(type = "survival") %>% data.frame
writexl::write_xlsx(parametric_model_female,
"Paper_resultados/Parametric_model/Survival_rate/Output/Total/Sex/Outcome_female.xlsx")
# Guardar la curva de supervivencia estimada
setEPS()
postscript("Paper_resultados/Parametric_model/Survival_rate/Output/Total/Sex/Curva.eps")
plot(df_km_sex,  main = "", xlab = "Time since admission to ICU (days)",
ylab = "Survival probability", col = c("black", "azure4"))
lines(parametric_model_sex$flex[[1]], ci = TRUE,   col = "black")
lines(parametric_model_sex$flex[[2]], ci = TRUE,   col = "azure4")
legend("topright", legend = c("Male", "Female"),
lwd = 1:(2 + 1),
col = c("black", "azure4"), bty = "n", fill = c("black","azure4"),
horiz = TRUE, inset = 0.08)
dev.off()
parametric_model_age = dataset_parametric %>% group_by(Group_age) %>% do(flex = flexsurvreg(Surv(t_UCI, d) ~ 1, data = ., dist = "gompertz"))
df_km_group <-  survfit(Surv(t_UCI, d) ~ Group, data = dataset_parametric)
# Grupo 1
parametric_model_age_1 = parametric_model_age[[2]][[1]] %>% summary(type = "survival") %>% data.frame
writexl::write_xlsx(parametric_model_age_1,
"Paper_resultados/Parametric_model/Survival_rate/Output/Total/Age/Outcome_g1.xlsx")
# Grupo 2:
parametric_model_age_2 = parametric_model_age[[2]][[2]] %>% summary(type = "survival") %>% data.frame
writexl::write_xlsx(parametric_model_age_2,
"Paper_resultados/Parametric_model/Survival_rate/Output/Total/Age/Outcome_g2.xlsx")
# Guardar la curva de supervivencia estimada
setEPS()
postscript("Paper_resultados/Parametric_model/Survival_rate/Output/Total/Age/Curva.eps")
plot(df_km_group,  main = "", xlab = "Time since admission to ICU (days)",
ylab = "Survival probability", col = c("black", "azure4"))
lines(parametric_model_age$flex[[1]], ci = TRUE,   col = "black")
lines(parametric_model_age$flex[[2]], ci = TRUE,   col = "azure4")
legend("topright", legend = c("[18,65)", "[65,Inf]"),
lwd = 1:(2 + 1),
col = c("black", "azure4"), bty = "n", fill = c("black","azure4"),
horiz = TRUE, inset = 0.08)
dev.off()
